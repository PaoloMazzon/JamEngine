Basic outline time

LJE (Light Jam Engine) uses SDL2

*** IMPORTANT INFO
The struct definition for the Textures is held in the renderer
to avoid circular references, while the functions for textures
are stored in the Texture.h and Texture.c

This engine does not define any sort of audio functionality
because it would just be a very simple wrapper of SDL's
mixer. This is not needed because implementing SDL_mixer
audio is already extremely simple and would rather inefficient
to wrap every function.

Algorithm???: The world should be able to auto tile on the fly to
a texture that is of a size less than the world kind of in a chunk
system to only update and store in vram those on screen.

*****************SMAPS*****************
Their files look like the following
/*
key=val
key=val
key=val
*/
Just INI files without headers

*** Bits & Pieces To-do when I'm not feeling like a lazy prick
 - Gamepad input
 - Rewrite the window resizing function so it doesn't crash the game if it fails

*** Possible future additions
 - SAT Collisions
 - Vector images
 - Tweening

Texture
 - Internal SDL texture
 - Basic information

Sprite
 - Textures
 - Animation information

Hit-box
 - Circles
 - Squares

Entities
 - Sprite
 - Hit-box
 - Render depth/render location

Entity Lists
 - Entities
 - Processors (function to perform
   on each entity in the list)

Font
 - Bitmap
 - TTF

Input System
Particle System
Tile Maps

World
 - Entity list of major entities
 - List of entity lists for things like NPCs and walls
 - Collision grids
 - Tile maps
 - Function that runs on creation, frame updates, and destruction

Renderer
 - Render information
 - Currently loaded font
 - Currently loaded input system

*** Program Structure
1. Create a renderer, load a world
2. A world is ran until it is switched

*** TODO (- means done and + means todo)
 - Textures
 	- Load textures
 	- Create from scratch
 - Input System
 	- Mouse input
 	- Keyboard input
 	+ Gamepad input
 - Renderer
 	- Create window
 	- Handle window scaling/fullscreen
 	- Variable size screen buffer and render size
 	- Main game loop
 - Drawing functions
 	- Render textures
 	+ Let the fill colour thing work with alpha values
 	+ Draw shapes
 	+ Fonts (This implies that the font struct contains practical things only)
 - Sprite
 	- Handle animations
 	- Frames
 	- Sprite rendering functions
 	- Load sprite sheet
 - Hit-box
 	- Circles
 	- Rectangles
 	+ Circle-to-rectangle (Algorithm is written down just don't want to type it out)
 - Entity
 	- Position in world
 	- Sprite
 	- Hit-box
 	- Speed/Friction
 	- Built-in processors
 - Tile Maps       - Important for fast collisions
	- Store grid in memory
	- Check collisions with entities
 - Fonts           - Important for most projects
 - Entity Lists    - Important for handling lots of things
 - Particle System - Very notable addition
 - Worlds          - Great feature yet not needed